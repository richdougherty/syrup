Syrup is an impractical JavaScript interpreter. It will probably be the
slowest JavaScript interpreter in existence, if it is ever finished.
Which is unlikely.

Nonetheless I'm at least starting to write it, and it does have a few
neat things going for it.

* Written to closely follow the ECMAScript 5.1 specification. Where
  possible I'm following the algorithms given in the spec, even if
  they're slow. The advantage of not making any effort to speed
  things up is that it makes the interpreter easy to read, write and
  maintain.

* Written in a functional style with immutable VM state. Again
  this design decision makes things run more slowly. But immutable
  state makes things easier to understand in lots of ways. Also
  having a VM state object you can pass around would be handy if the
  interpreter were to ever be embedded within another program.

* Uses delimited continuations to embed JavaScript control flow into
  the host language with minimum of fuss. For example, you can throw
  a JavaScript exception within host code and it will be handled
  appropriately. (This is all done with the "shift" operator, not
  with the host language's builtin exceptions. No cheating.)

* Uses delimited continuations to update immutable state via familiar
  mutation operations. Write immutable code in a mutable style!

* Written in Scala.

Currently Syrup uses Rhino for parsing (I was lazy). Syrup is able to
run amazing programs like this:

  for (var i = 0; i < 10; i++) {}
